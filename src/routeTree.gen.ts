/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TexasRoomRouteImport } from './routes/texas-room'
import { Route as RoseRoomRouteImport } from './routes/rose-room'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as BookingRouteImport } from './routes/booking'
import { Route as AccountRouteImport } from './routes/account'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminPropertyManagementRouteImport } from './routes/admin/property-management'
import { Route as AdminBookingsRouteImport } from './routes/admin/bookings'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc/$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const TexasRoomRoute = TexasRoomRouteImport.update({
  id: '/texas-room',
  path: '/texas-room',
  getParentRoute: () => rootRouteImport,
} as any)
const RoseRoomRoute = RoseRoomRouteImport.update({
  id: '/rose-room',
  path: '/rose-room',
  getParentRoute: () => rootRouteImport,
} as any)
const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingRoute = BookingRouteImport.update({
  id: '/booking',
  path: '/booking',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminPropertyManagementRoute = AdminPropertyManagementRouteImport.update({
  id: '/admin/property-management',
  path: '/admin/property-management',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminBookingsRoute = AdminBookingsRouteImport.update({
  id: '/admin/bookings',
  path: '/admin/bookings',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/booking': typeof BookingRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/rose-room': typeof RoseRoomRoute
  '/texas-room': typeof TexasRoomRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/property-management': typeof AdminPropertyManagementRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/booking': typeof BookingRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/rose-room': typeof RoseRoomRoute
  '/texas-room': typeof TexasRoomRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/property-management': typeof AdminPropertyManagementRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/booking': typeof BookingRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/rose-room': typeof RoseRoomRoute
  '/texas-room': typeof TexasRoomRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/property-management': typeof AdminPropertyManagementRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/booking'
    | '/login'
    | '/logout'
    | '/rose-room'
    | '/texas-room'
    | '/admin/bookings'
    | '/admin/property-management'
    | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/booking'
    | '/login'
    | '/logout'
    | '/rose-room'
    | '/texas-room'
    | '/admin/bookings'
    | '/admin/property-management'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/booking'
    | '/login'
    | '/logout'
    | '/rose-room'
    | '/texas-room'
    | '/admin/bookings'
    | '/admin/property-management'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  BookingRoute: typeof BookingRoute
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  RoseRoomRoute: typeof RoseRoomRoute
  TexasRoomRoute: typeof TexasRoomRoute
  AdminBookingsRoute: typeof AdminBookingsRoute
  AdminPropertyManagementRoute: typeof AdminPropertyManagementRoute
  AdminIndexRoute: typeof AdminIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/texas-room': {
      id: '/texas-room'
      path: '/texas-room'
      fullPath: '/texas-room'
      preLoaderRoute: typeof TexasRoomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rose-room': {
      id: '/rose-room'
      path: '/rose-room'
      fullPath: '/rose-room'
      preLoaderRoute: typeof RoseRoomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/booking': {
      id: '/booking'
      path: '/booking'
      fullPath: '/booking'
      preLoaderRoute: typeof BookingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/property-management': {
      id: '/admin/property-management'
      path: '/admin/property-management'
      fullPath: '/admin/property-management'
      preLoaderRoute: typeof AdminPropertyManagementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/bookings': {
      id: '/admin/bookings'
      path: '/admin/bookings'
      fullPath: '/admin/bookings'
      preLoaderRoute: typeof AdminBookingsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  BookingRoute: BookingRoute,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  RoseRoomRoute: RoseRoomRoute,
  TexasRoomRoute: TexasRoomRoute,
  AdminBookingsRoute: AdminBookingsRoute,
  AdminPropertyManagementRoute: AdminPropertyManagementRoute,
  AdminIndexRoute: AdminIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
